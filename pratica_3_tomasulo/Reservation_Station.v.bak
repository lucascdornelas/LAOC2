module Reservation_Station(
	input [15:0] instruction, 
	input Clock, Adderin, 
	input[15:0] R1, R2, R3, R4, R5, R6, 
	output reg instOutEnable, 
	output reg [15:0] instOut, 
	output wire done, 
	output wire [15:0] dout, 
	output disponivel, 
	output wire[15:0] doneInst
);
  reg [7:0] busy; 									// Quando a estacao de reserva e a unidade estiverem ocupadas
  reg [2:0] Name[7:0]; 								// Guarda um apelido para a instrucao
  reg [2:0]	Qj[7:0]; 								// Operando fonte, 0= já disponíve
  reg [2:0]	Qk[7:0]; 								// Operando fonte, 0= já disponível
  reg [15:0] OP[7:0]; 								// Operacao em si, descobre quando o resultado ficou pronto. Guarda o resultado da instrucao
  reg [2:0] registerStatus[7:0]; 				// Guarda o estado de cada registrador. Disponivel = 0, valor = apelido da instrucao que ele aguarda
  reg [2:0] instructionCodeIn; 					// Envia para a ULA a linha da inst
  wire [2:0] instructionCodeOut; 				// Retorna a linha da inst para resolver busy

  reg [2:0] verifyWire; 							// Verifica a existencia de uma instrucao com os dois operadores prontos
  integer i, j;
  
  wire[15:0]reg1;										// Conecta os dois registradores que foi passado para unidade funcional
  wire[15:0]reg2;										
  wire disponivelUF;									
  
  assign disponivel = ~busy[1] | ~busy[2] | ~busy[3] | ~busy[4] | ~busy[5] | ~busy[6] | ~busy[7]; //marca quando algum fica disponivel
  
  // inicialaizando os status registradores
  initial
  begin
  for(j = 0; j <= 7; j = j + 1)
	begin
		registerStatus[j] = 0;
		busy[j] = 0;
	end
	verifyWire = 0;
  end

  mux getR1(R1, R2, R3, R4, R5, R6, instOut[6:4], reg1);
  mux getR1(R1, R2, R3, R4, R5, R6, instOut[9:7], reg2);
  
  //		A essa altura, os resultados das unidades funcionais estão disponíveis. Se o CDB estiver
  // disponível, os dados são escritos nele e, consequentemente, encaminhados para as estações e
  // registradores que os esperam. Nessa etapa também ocorrem as escritas à memória.
  UnidadeFuncional UF(Clock, instOut, instOutEnable, instructionCodeIn, instructionCodeOut, done, doneInst, dout, disponivelUF, reg1, reg2);
  
  reg break1 = 0;
  reg break2 = 0;
  
  always @ (posedge Clock)
  begin
    instOut = 1'b0;
    instOutEnable = 1'b0;

    if(Adderin == 1'b1)
    begin
	 for(i=1; i<=7; i = i + 1) 
		begin

		if(busy[i]==1'b0 && break1 != 1)
		begin
			busy[i]=1;
      	OP[i][15:0] = instruction[15:0]; 						
       	
			if(OP[i][3:0]==4'b0000 || OP[i][3:0]==4'b0001 || OP[i][3:0]==4'b0100)
				begin															
					Qj[i] = registerStatus[instruction[9:7]]; 	
					Qk[i] = registerStatus[instruction[6:4]]; 	
					registerStatus[instruction[12:10]] = i; 		
				end
				else
				begin 														
					Qj[i] = registerStatus[instruction[9:7]]; 	
					Qk[i] = 3'b000; 										
					registerStatus[instruction[6:4]] = i; 			
				end
		break2 = 1;
		end																
		end
   end
	 
	//Always at clock
	for(i=7; i>=0; i=i-1) 
		begin
		  if(Qj[i]== 3'b000 && Qk[i]== 3'b000 && busy[i]==1 && break2 != 0) 
			begin 
				verifyWire = i; 
				instructionCodeIn = i;
				break2 = 1; 
			end
		end
	
  if(done==1)
	begin
		busy[instructionCodeOut] = 0; 
		for(i=7; i>0; i=i-1)
			begin
				if(Qj[i]==instOut[12:10])
					begin
						registerStatus[i]=0;
						Qj[i]=3'b000;
					end
				if(Qk[i]==instOut[12:10])
					begin
						registerStatus[i]=0;
						Qk[i]=3'b000;
					end
			end
	end
	if(verifyWire != 0 && disponivelUF)
		begin
			instOutEnable = 1'b1;
			instOut = OP[verifyWire];
		end
end
  
endmodule